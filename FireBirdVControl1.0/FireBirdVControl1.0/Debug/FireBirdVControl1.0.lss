
FireBirdVControl1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  000003ea  0000047e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800204  00800204  00000482  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000bff  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000c0  00000000  00000000  00000c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000491  00000000  00000000  00000cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000018c  00000000  00000000  0000117f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b2a  00000000  00000000  0000130b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000190  00000000  00000000  00001e38  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000eb47  00000000  00000000  00001fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000117  00000000  00000000  00010b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a0  00000000  00000000  00010c26  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00003d1c  00000000  00000000  00010cc6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ee       	ldi	r30, 0xEA	; 234
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 30       	cpi	r26, 0x04	; 4
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e0       	ldi	r26, 0x04	; 4
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a9 30       	cpi	r26, 0x09	; 9
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	34 d1       	rcall	.+616    	; 0x388 <main>
 120:	62 c1       	rjmp	.+708    	; 0x3e6 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <timer5_init>:
	motion_set(0x01);
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
	motion_set(0x08);
 124:	e1 e2       	ldi	r30, 0x21	; 33
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	10 82       	st	Z, r1
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	80 93 25 01 	sts	0x0125, r24
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	90 93 24 01 	sts	0x0124, r25
 136:	10 92 29 01 	sts	0x0129, r1
 13a:	80 93 28 01 	sts	0x0128, r24
 13e:	10 92 2b 01 	sts	0x012B, r1
 142:	80 93 2a 01 	sts	0x012A, r24
 146:	10 92 2d 01 	sts	0x012D, r1
 14a:	80 93 2c 01 	sts	0x012C, r24
 14e:	89 ea       	ldi	r24, 0xA9	; 169
 150:	80 93 20 01 	sts	0x0120, r24
 154:	8b e0       	ldi	r24, 0x0B	; 11
 156:	80 83       	st	Z, r24
 158:	08 95       	ret

0000015a <motion_pin_config>:
 15a:	81 b1       	in	r24, 0x01	; 1
 15c:	8f 60       	ori	r24, 0x0F	; 15
 15e:	81 b9       	out	0x01, r24	; 1
 160:	82 b1       	in	r24, 0x02	; 2
 162:	80 7f       	andi	r24, 0xF0	; 240
 164:	82 b9       	out	0x02, r24	; 2
 166:	ea e0       	ldi	r30, 0x0A	; 10
 168:	f1 e0       	ldi	r31, 0x01	; 1
 16a:	80 81       	ld	r24, Z
 16c:	88 61       	ori	r24, 0x18	; 24
 16e:	80 83       	st	Z, r24
 170:	eb e0       	ldi	r30, 0x0B	; 11
 172:	f1 e0       	ldi	r31, 0x01	; 1
 174:	80 81       	ld	r24, Z
 176:	88 61       	ori	r24, 0x18	; 24
 178:	80 83       	st	Z, r24
 17a:	08 95       	ret

0000017c <velocity>:
 17c:	80 93 28 01 	sts	0x0128, r24
 180:	60 93 2a 01 	sts	0x012A, r22
 184:	08 95       	ret

00000186 <uart0_init>:
 186:	e1 ec       	ldi	r30, 0xC1	; 193
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	10 82       	st	Z, r1
 18c:	10 92 c0 00 	sts	0x00C0, r1
 190:	86 e0       	ldi	r24, 0x06	; 6
 192:	80 93 c2 00 	sts	0x00C2, r24
 196:	8f e5       	ldi	r24, 0x5F	; 95
 198:	80 93 c4 00 	sts	0x00C4, r24
 19c:	10 92 c5 00 	sts	0x00C5, r1
 1a0:	88 e9       	ldi	r24, 0x98	; 152
 1a2:	80 83       	st	Z, r24
 1a4:	08 95       	ret

000001a6 <motion_set>:
 1a6:	92 b1       	in	r25, 0x02	; 2
 1a8:	90 7f       	andi	r25, 0xF0	; 240
 1aa:	8f 70       	andi	r24, 0x0F	; 15
 1ac:	98 2b       	or	r25, r24
 1ae:	92 b9       	out	0x02, r25	; 2
 1b0:	08 95       	ret

000001b2 <forward>:
 1b2:	86 e0       	ldi	r24, 0x06	; 6
 1b4:	f8 cf       	rjmp	.-16     	; 0x1a6 <motion_set>

000001b6 <back>:
 1b6:	89 e0       	ldi	r24, 0x09	; 9
 1b8:	f6 cf       	rjmp	.-20     	; 0x1a6 <motion_set>

000001ba <left>:
 1ba:	85 e0       	ldi	r24, 0x05	; 5
 1bc:	f4 cf       	rjmp	.-24     	; 0x1a6 <motion_set>

000001be <right>:
 1be:	8a e0       	ldi	r24, 0x0A	; 10
 1c0:	f2 cf       	rjmp	.-28     	; 0x1a6 <motion_set>

000001c2 <stop>:
}

void stop (void)
{
	motion_set(0x00);
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	f0 cf       	rjmp	.-32     	; 0x1a6 <motion_set>

000001c6 <__vector_25>:
}


//SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
SIGNAL(USART0_RX_vect)
{
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	0b b6       	in	r0, 0x3b	; 59
 1d2:	0f 92       	push	r0
 1d4:	2f 93       	push	r18
 1d6:	3f 93       	push	r19
 1d8:	4f 93       	push	r20
 1da:	5f 93       	push	r21
 1dc:	6f 93       	push	r22
 1de:	7f 93       	push	r23
 1e0:	8f 93       	push	r24
 1e2:	9f 93       	push	r25
 1e4:	af 93       	push	r26
 1e6:	bf 93       	push	r27
 1e8:	ef 93       	push	r30
 1ea:	ff 93       	push	r31
	data = UDR0; 				//making copy of data from UDR0 in 'data' variable
 1ec:	20 91 c6 00 	lds	r18, 0x00C6
 1f0:	20 93 08 02 	sts	0x0208, r18

	//UDR0 = data; 				//echo data back to PC
	if(ignore_count == 0)
 1f4:	80 91 04 02 	lds	r24, 0x0204
 1f8:	90 91 05 02 	lds	r25, 0x0205
 1fc:	00 97       	sbiw	r24, 0x00	; 0
 1fe:	c1 f5       	brne	.+112    	; 0x270 <__vector_25+0xaa>
	{
		if(status == 0 && data != 3)
 200:	80 91 06 02 	lds	r24, 0x0206
 204:	90 91 07 02 	lds	r25, 0x0207
 208:	00 97       	sbiw	r24, 0x00	; 0
 20a:	a1 f4       	brne	.+40     	; 0x234 <__vector_25+0x6e>
 20c:	23 30       	cpi	r18, 0x03	; 3
 20e:	39 f0       	breq	.+14     	; 0x21e <__vector_25+0x58>
		{
			ignore_count = (ignore_count+1)%3;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	90 93 05 02 	sts	0x0205, r25
 218:	80 93 04 02 	sts	0x0204, r24
			return;
 21c:	9c c0       	rjmp	.+312    	; 0x356 <__vector_25+0x190>
		}
		
		if(status == 0 && data == 3){
			status = 1;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	90 93 07 02 	sts	0x0207, r25
 226:	80 93 06 02 	sts	0x0206, r24
			ignore_count = 0;
 22a:	10 92 05 02 	sts	0x0205, r1
 22e:	10 92 04 02 	sts	0x0204, r1
 232:	27 c0       	rjmp	.+78     	; 0x282 <__vector_25+0xbc>
		}
		else if(status == 1){
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	91 05       	cpc	r25, r1
 238:	69 f4       	brne	.+26     	; 0x254 <__vector_25+0x8e>
			leftvelocity = data;
 23a:	20 93 01 02 	sts	0x0201, r18
			status = 2;
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	90 93 07 02 	sts	0x0207, r25
 246:	80 93 06 02 	sts	0x0206, r24
			ignore_count = 0;
 24a:	10 92 05 02 	sts	0x0205, r1
 24e:	10 92 04 02 	sts	0x0204, r1
 252:	17 c0       	rjmp	.+46     	; 0x282 <__vector_25+0xbc>
		}
		else if(status == 2){
 254:	02 97       	sbiw	r24, 0x02	; 2
 256:	09 f0       	breq	.+2      	; 0x25a <__vector_25+0x94>
 258:	7e c0       	rjmp	.+252    	; 0x356 <__vector_25+0x190>
			rightvelocity = data;
 25a:	20 93 00 02 	sts	0x0200, r18
			status = 0;
 25e:	10 92 07 02 	sts	0x0207, r1
 262:	10 92 06 02 	sts	0x0206, r1
			ignore_count = 0;
 266:	10 92 05 02 	sts	0x0205, r1
 26a:	10 92 04 02 	sts	0x0204, r1
 26e:	09 c0       	rjmp	.+18     	; 0x282 <__vector_25+0xbc>
		}
		
	}
	else
	{
		ignore_count = (ignore_count+1)%3;
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	63 e0       	ldi	r22, 0x03	; 3
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	90 d0       	rcall	.+288    	; 0x398 <__divmodhi4>
 278:	90 93 05 02 	sts	0x0205, r25
 27c:	80 93 04 02 	sts	0x0204, r24
		return;
 280:	6a c0       	rjmp	.+212    	; 0x356 <__vector_25+0x190>
	}
	
	if(status == 0){
 282:	80 91 06 02 	lds	r24, 0x0206
 286:	90 91 07 02 	lds	r25, 0x0207
 28a:	89 2b       	or	r24, r25
 28c:	09 f0       	breq	.+2      	; 0x290 <__vector_25+0xca>
 28e:	63 c0       	rjmp	.+198    	; 0x356 <__vector_25+0x190>
		if(leftvelocity == (uint8_t)128 && rightvelocity == (uint8_t)128)
 290:	80 91 01 02 	lds	r24, 0x0201
 294:	80 38       	cpi	r24, 0x80	; 128
 296:	31 f4       	brne	.+12     	; 0x2a4 <__vector_25+0xde>
 298:	80 91 00 02 	lds	r24, 0x0200
 29c:	80 38       	cpi	r24, 0x80	; 128
 29e:	21 f4       	brne	.+8      	; 0x2a8 <__vector_25+0xe2>
		{
			stop();
 2a0:	90 df       	rcall	.-224    	; 0x1c2 <stop>
 2a2:	59 c0       	rjmp	.+178    	; 0x356 <__vector_25+0x190>
		}
		
		else
		{
			
			if(leftvelocity >= (uint8_t)128 && rightvelocity >= (uint8_t)128)
 2a4:	88 23       	and	r24, r24
 2a6:	b4 f4       	brge	.+44     	; 0x2d4 <__vector_25+0x10e>
 2a8:	80 91 00 02 	lds	r24, 0x0200
 2ac:	88 23       	and	r24, r24
 2ae:	0c f0       	brlt	.+2      	; 0x2b2 <__vector_25+0xec>
 2b0:	40 c0       	rjmp	.+128    	; 0x332 <__vector_25+0x16c>
			{
				forward();
 2b2:	7f df       	rcall	.-258    	; 0x1b2 <forward>
				leftvelocity = 2*(leftvelocity - zeroval);
 2b4:	90 91 02 02 	lds	r25, 0x0202
 2b8:	80 91 01 02 	lds	r24, 0x0201
 2bc:	89 1b       	sub	r24, r25
 2be:	88 0f       	add	r24, r24
 2c0:	80 93 01 02 	sts	0x0201, r24
				rightvelocity = 2*(rightvelocity - zeroval);
 2c4:	60 91 00 02 	lds	r22, 0x0200
 2c8:	69 1b       	sub	r22, r25
 2ca:	66 0f       	add	r22, r22
 2cc:	60 93 00 02 	sts	0x0200, r22
				velocity(leftvelocity, rightvelocity);
 2d0:	55 df       	rcall	.-342    	; 0x17c <velocity>
 2d2:	41 c0       	rjmp	.+130    	; 0x356 <__vector_25+0x190>
				
			}
			
			else if(leftvelocity < (uint8_t)128 && rightvelocity < (uint8_t)128)
 2d4:	80 91 00 02 	lds	r24, 0x0200
 2d8:	88 23       	and	r24, r24
 2da:	b4 f0       	brlt	.+44     	; 0x308 <__vector_25+0x142>
			{
				back();
 2dc:	6c df       	rcall	.-296    	; 0x1b6 <back>
				leftvelocity = 2*(zeroval-leftvelocity);
 2de:	60 91 02 02 	lds	r22, 0x0202
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	80 91 01 02 	lds	r24, 0x0201
 2e8:	9b 01       	movw	r18, r22
 2ea:	28 1b       	sub	r18, r24
 2ec:	31 09       	sbc	r19, r1
 2ee:	c9 01       	movw	r24, r18
 2f0:	88 0f       	add	r24, r24
 2f2:	80 93 01 02 	sts	0x0201, r24
				rightvelocity = 2*(zeroval-rightvelocity);
 2f6:	90 91 00 02 	lds	r25, 0x0200
 2fa:	69 1b       	sub	r22, r25
 2fc:	71 09       	sbc	r23, r1
 2fe:	66 0f       	add	r22, r22
 300:	60 93 00 02 	sts	0x0200, r22
				velocity(leftvelocity, rightvelocity);
 304:	3b df       	rcall	.-394    	; 0x17c <velocity>
 306:	27 c0       	rjmp	.+78     	; 0x356 <__vector_25+0x190>
				
			}
			
			else if(leftvelocity < (uint8_t)128 && rightvelocity >= (uint8_t)128)
			{
				left();
 308:	58 df       	rcall	.-336    	; 0x1ba <left>
				leftvelocity = 2*(zeroval-leftvelocity);
 30a:	20 91 02 02 	lds	r18, 0x0202
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	80 91 01 02 	lds	r24, 0x0201
 314:	a9 01       	movw	r20, r18
 316:	48 1b       	sub	r20, r24
 318:	51 09       	sbc	r21, r1
 31a:	ca 01       	movw	r24, r20
 31c:	88 0f       	add	r24, r24
 31e:	80 93 01 02 	sts	0x0201, r24
				rightvelocity = 2*(rightvelocity - zeroval);
 322:	60 91 00 02 	lds	r22, 0x0200
 326:	62 1b       	sub	r22, r18
 328:	66 0f       	add	r22, r22
 32a:	60 93 00 02 	sts	0x0200, r22
				velocity(leftvelocity, rightvelocity);
 32e:	26 df       	rcall	.-436    	; 0x17c <velocity>
 330:	12 c0       	rjmp	.+36     	; 0x356 <__vector_25+0x190>
				
			}
			else if(leftvelocity >= (uint8_t)128 && rightvelocity < (uint8_t)128)
			{
				right();
 332:	45 df       	rcall	.-374    	; 0x1be <right>
				leftvelocity = 2*(leftvelocity - zeroval);
 334:	60 91 02 02 	lds	r22, 0x0202
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	80 91 01 02 	lds	r24, 0x0201
 33e:	86 1b       	sub	r24, r22
 340:	88 0f       	add	r24, r24
 342:	80 93 01 02 	sts	0x0201, r24
				rightvelocity = 2*(zeroval-rightvelocity);
 346:	90 91 00 02 	lds	r25, 0x0200
 34a:	69 1b       	sub	r22, r25
 34c:	71 09       	sbc	r23, r1
 34e:	66 0f       	add	r22, r22
 350:	60 93 00 02 	sts	0x0200, r22
				velocity(leftvelocity, rightvelocity);
 354:	13 df       	rcall	.-474    	; 0x17c <velocity>
		buzzer_off();
	

	}*/

}
 356:	ff 91       	pop	r31
 358:	ef 91       	pop	r30
 35a:	bf 91       	pop	r27
 35c:	af 91       	pop	r26
 35e:	9f 91       	pop	r25
 360:	8f 91       	pop	r24
 362:	7f 91       	pop	r23
 364:	6f 91       	pop	r22
 366:	5f 91       	pop	r21
 368:	4f 91       	pop	r20
 36a:	3f 91       	pop	r19
 36c:	2f 91       	pop	r18
 36e:	0f 90       	pop	r0
 370:	0b be       	out	0x3b, r0	; 59
 372:	0f 90       	pop	r0
 374:	0f be       	out	0x3f, r0	; 63
 376:	0f 90       	pop	r0
 378:	1f 90       	pop	r1
 37a:	18 95       	reti

0000037c <init_devices>:



void init_devices (void) //use this function to initialize all devices
{
	cli(); //disable all interrupts
 37c:	f8 94       	cli
	motion_pin_config();
 37e:	ed de       	rcall	.-550    	; 0x15a <motion_pin_config>
	uart0_init(); //Initailize UART1 for serial communiaction
 380:	02 df       	rcall	.-508    	; 0x186 <uart0_init>
	timer5_init();
 382:	d0 de       	rcall	.-608    	; 0x124 <timer5_init>
	sei(); //re-enable interrupts
 384:	78 94       	sei
 386:	08 95       	ret

00000388 <main>:



int main (void)
{
	board_init();
 388:	06 d0       	rcall	.+12     	; 0x396 <board_init>
	
	init_devices();
 38a:	f8 df       	rcall	.-16     	; 0x37c <init_devices>

	//stop();
	forward();
 38c:	12 df       	rcall	.-476    	; 0x1b2 <forward>
	velocity(0, 0);
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	f4 de       	rcall	.-536    	; 0x17c <velocity>
 394:	ff cf       	rjmp	.-2      	; 0x394 <main+0xc>

00000396 <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
 396:	08 95       	ret

00000398 <__divmodhi4>:
 398:	97 fb       	bst	r25, 7
 39a:	07 2e       	mov	r0, r23
 39c:	16 f4       	brtc	.+4      	; 0x3a2 <__divmodhi4+0xa>
 39e:	00 94       	com	r0
 3a0:	06 d0       	rcall	.+12     	; 0x3ae <__divmodhi4_neg1>
 3a2:	77 fd       	sbrc	r23, 7
 3a4:	08 d0       	rcall	.+16     	; 0x3b6 <__divmodhi4_neg2>
 3a6:	0b d0       	rcall	.+22     	; 0x3be <__udivmodhi4>
 3a8:	07 fc       	sbrc	r0, 7
 3aa:	05 d0       	rcall	.+10     	; 0x3b6 <__divmodhi4_neg2>
 3ac:	3e f4       	brtc	.+14     	; 0x3bc <__divmodhi4_exit>

000003ae <__divmodhi4_neg1>:
 3ae:	90 95       	com	r25
 3b0:	81 95       	neg	r24
 3b2:	9f 4f       	sbci	r25, 0xFF	; 255
 3b4:	08 95       	ret

000003b6 <__divmodhi4_neg2>:
 3b6:	70 95       	com	r23
 3b8:	61 95       	neg	r22
 3ba:	7f 4f       	sbci	r23, 0xFF	; 255

000003bc <__divmodhi4_exit>:
 3bc:	08 95       	ret

000003be <__udivmodhi4>:
 3be:	aa 1b       	sub	r26, r26
 3c0:	bb 1b       	sub	r27, r27
 3c2:	51 e1       	ldi	r21, 0x11	; 17
 3c4:	07 c0       	rjmp	.+14     	; 0x3d4 <__udivmodhi4_ep>

000003c6 <__udivmodhi4_loop>:
 3c6:	aa 1f       	adc	r26, r26
 3c8:	bb 1f       	adc	r27, r27
 3ca:	a6 17       	cp	r26, r22
 3cc:	b7 07       	cpc	r27, r23
 3ce:	10 f0       	brcs	.+4      	; 0x3d4 <__udivmodhi4_ep>
 3d0:	a6 1b       	sub	r26, r22
 3d2:	b7 0b       	sbc	r27, r23

000003d4 <__udivmodhi4_ep>:
 3d4:	88 1f       	adc	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	5a 95       	dec	r21
 3da:	a9 f7       	brne	.-22     	; 0x3c6 <__udivmodhi4_loop>
 3dc:	80 95       	com	r24
 3de:	90 95       	com	r25
 3e0:	bc 01       	movw	r22, r24
 3e2:	cd 01       	movw	r24, r26
 3e4:	08 95       	ret

000003e6 <_exit>:
 3e6:	f8 94       	cli

000003e8 <__stop_program>:
 3e8:	ff cf       	rjmp	.-2      	; 0x3e8 <__stop_program>
